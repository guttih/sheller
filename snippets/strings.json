{
    "Prefix search known length": {
        "prefix": "string prefix length",
        "body": [
            "STRING=\"two-chars-after-3x\"",
            "echo \"STRING: \\$STRING\"",
            "echo \"All but last 2    : \\\\\"\\${STRING::-2}\\\\\"\"",
            "echo \"Only show first 16: \\\\\"\\${STRING::+16}\\\\\"\"",
            "if [[ \"\\${STRING::-2}\" == \"two-chars-after-\" ]]; then",
            "    echo \"It's a match\"",
            "fi",
            ""
        ],
        "description": "Check if a string starts with a specific text and is of a specific lengthS"
    },
    "Prefix search with wildcard": {
        "prefix": "string starts with",
        "body": [
            "STRING=\"Bash is great\"",
            "echo \"STRING: \\$STRING\"",
            "if [[ \"\\$STRING\" == \\$\"Bash is \"*  ]]; then",
            "    echo \"It's a match STRING starts with \\\\\"Bash is \\\\\"\"",
            "fi",
            ""
        ],
        "description": "Check if string starts with using wild card"
    },
    "Postfix search": {
        "prefix": "string ends with",
        "body": [
            "STRING=\"Bash is great\"",
            "ENDING=\\${STRING: -7}",
            "echo \"STRING: \\$STRING\"",
            "echo \"Last 7    : \\\\\"\\$ENDING\\\\\"\"",
            "if [[ \"\\$ENDING\" == \"s great\"  ]]; then",
            "    echo \"It's a match STRING ends with \\\\\"s great\\\\\"\"",
            "fi",
            ""
        ],
        "description": "Check if string ends with"
    },
    "Substring with cut": {
        "prefix": "string cut",
        "body": [
            "STRING=\"Bash is great\"",
            "STRLEN=\\$(echo \\${#STRING})",
            "echo \"String                          :\\$STRING\"",
            "echo \"Length                          :\\$STRLEN\"",
            "echo \"First 4                         :\\$(echo \"\\$STRING\"|cut -c -3)\"",
            "echo \"middle                          :\\$(echo \"\\$STRING\"|cut -c 4-9) \"",
            "echo \"last  3 when length is known    :\\$(echo \"\\$STRING\"|cut -c 11-)\"",
            "echo \"last  3 when length is NOT known:\\$(echo \"\\$STRING\"|cut -c \\$(( STRLEN - 2))-)\"",
            ""
        ],
        "description": "Examples when extracting substring from a string using cut. (For when bash version is old)"
    },
    "Replace text in a file": {
        "prefix": "replace text in file",
        "body": [
            "#Function: replaceStrings()",
            "#",
            "#Brief: Replaces text of all strings in a file that  ",
            "#       match given string with a specific value. ",
            "#",
            "#Argument 1(\\$1): File to change",
            "#Argument 2(\\$2): String to search for",
            "#Argument 3(\\$3): new value",
            "#Argument 4(\\$4): (Optional) Set to \"true\" if you want the entire line to be matched",
            "#   # Example - Replace all lines which contain exactly the content \"Find me\" in the file test.txt",
            "#      replaceStrings \"test.txt\" \"Find me\" \"New string\" true",
            "#   # Example - Replace all substrings that match \"Find me\" in the file test.txt",
            "#      replaceStrings \"test.txt\" \"Find me\" \"New string\"",
            "replaceStrings(){",
            "    if [ \\$# -lt 3 ]; then echo \"Invalid number of parameters provided to \\$FUNCNAME\"; $(return >/dev/null 2>&1) && return 1 ||  exit 1; fi",
            "    ",
            "    declare FILE=\\$1",
            "    declare SEARCH_FOR=\\$2",
            "    declare REPLACE_WITH=\\$3",
            "    declare END_TOKEN=\"\"",
            "    declare START_TOKEN=\"\"",
            "    if [[ \\$4 == \"true\" || \\$4 == \"TRUE\"  ]]; then START_TOKEN=\"^\";END_TOKEN=\"\\$\"; fi;",
            "    if [[  ! -f \\$FILE  ]]; then",
            "        echo \"File \\\\\"\\$FILE\\\\\" does not exist\"; $(return >/dev/null 2>&1) && return 1 ||  exit 1;",
            "    fi",
            "    sed -i 's,'\"\\$START_TOKEN\"''\"\\$SEARCH_FOR\"''\"\\$END_TOKEN\"','\"\\$REPLACE_WITH\"',g' \\$FILE",
            "}",
            ""
        ],
        "description": "Replace texts in a file that match a specified substring"
    },
    "Replace trailing text in a file that starts with": {
        "prefix": "replace text in file that starts with",
        "body": [
            "#Function: replaceStringsAfter()",
            "#",
            "#Brief: Replaces trailing text of all strings in a file that start ",
            "#       with a specific value.  Leading white spaces will be removed. ",
            "#",
            "#Argument 1(\\$1): File to change",
            "#Argument 2(\\$2): String to search for",
            "#Argument 3(\\$3): new value",
            "#   Example - find a line that starts with \"variable=\" in the file test.txt and replace that line with the text \"variable=new_value\"",
            "#      replaceStringsAfter test.txt \"variable=\" \"new_value\"",
            "replaceStringsAfter(){",
            "    if [ \\$# -ne 3 ]; then echo \"Invalid number of parameters provided to \\$FUNCNAME\"; $(return >/dev/null 2>&1) && return 1 ||  exit 1; fi",
            "",
            "    declare FILE=\\$1",
            "    declare SEARCH_FOR=\\$2",
            "    declare REPLACE_WITH=\\$3",
            "    if [[  ! -f \\$FILE  ]]; then",
            "        echo \"File \\\\\"\\$FILE\\\\\" does not exist\"; $(return >/dev/null 2>&1) && return 1 ||  exit 1;",
            "    fi",
            "",
            "    sed -i 's,^\\\\s*'\"\\$SEARCH_FOR\"'.*\\$,'\"\\$SEARCH_FOR\"''\"\\$REPLACE_WITH\"',g' \\$FILE",
            "}",
            ""
        ],
        "description": "Replace trailing texts in a file that begin with a specified substring"
    },
    "Create multiline file": {
        "prefix": "create text file",
        "body": [
            "#Function: createFile()",
            "#",
            "#Brief: Creates a file with muliple lines",
            "#",
            "#Argument 1(\\$1): File to create",
            "createFile() {",
            "    declare FILE=\"\\$1\"",
            "    echo \"Creating \\$FILE\"",
            "    CURRENT=\\$(date +\"%Y-%m-%d %H:%M:%S\")",
            "    read -r -d '' VAR <<EOM",
            "# File created \\$CURRENT.",
            "    This file contains",
            "    multiple lines",
            "EOM",
            "    echo \"\\$VAR\" >\"\\$FILE\"",
            "}",
            "",
            "createFile \"newFile.txt\"",
            ""
        ],
        "description": "Create a text file with multiple lines"
    },
    "StringTrailingNumber": {
        "prefix": "string extract trailing number",
        "body": [
            "STRING=\"abcd1234\"",
            "NUMBER=\\$( echo \"\\$STRING\" |grep -Eo [0-9]+\\$ )",
            "echo \"STRING: \\$STRING has trailing number: \\$NUMBER\""
        ],
        "description": "Extract trailing numbers from a string"
    },
    "String remove trailing numbers": {
        "prefix": "string remove trailing numbers",
        "body": [
            "#Function: removeTrailingNumber()",
            "#",
            "#Brief: Removes a trailing number from a string",
            "#Argument 1(\\$1): Input string",
            "#Returns: Echos the input string with no trailing number",
            "#",
            "#Usage example:",
            "#    NO_TRAIL_NUMBER=\\$(removeTrailingNumber \"asdf123\")",
            "#    echo \"NO_TRAIL_NUMBER: \\$NO_TRAIL_NUMBER\"",
            "removeTrailingNumber() {",
            "    if [ \\$# -ne 1 ]; then",
            "        echo \"Invalid number of parameters provided to \\$FUNCNAME\"",
            "        $(return >/dev/null 2>&1) && return 1 ||  exit 1",
            "    fi",
            "    declare PREV_STATE=\"\\$(shopt -p extglob)\"",
            "    if [[ \\$PREV_STATE != \"shopt -s extglob\" ]]; then shopt -s extglob; fi",
            "    declare NO_DIGIT=\\$(echo \"\\${1%%+([[:digit:]])}\")",
            "    if [[ \\$PREV_STATE != \"shopt -s extglob\" ]]; then shopt -u extglob; fi",
            "    echo \"\\$NO_DIGIT\"",
            "",
            "}"
        ],
        "description": "Function to removes all digits from the end of a string"
    },
    "Extract text between two tokens": {
        "prefix": ["string substring","extract sub string"],
        "body": [
            "#Function: subString()",
            "#",
            "#Brief: Extract text between two tokens",
            "#",
            "#Argument 1(\\$1): Input text",
            "#Argument 2(\\$2): Start token",
            "#Argument 3(\\$3): End token",
            "#Returns On success: The string between the two tokens.",
            "#        On error  : Empty string if tokens are not found",
            "# ",
            "#Usage example:",
            "#  THE_STRING=\"The thing about windows is that it's a wonderful operating system dude!\"",
            "#  RESULT=\\$(subString \"\\$THE_STRING\" \"thing about \" \" is that it\")",
            "#  echo \"\\${RESULT}, does not have a good shell\"",
            "subString(){",
            "    if [ \\$# -ne 3 ]; then echo \"Invalid number of parameters provided to \\$FUNCNAME\"; $(return >/dev/null 2>&1) && return 1 ||  exit 1; fi",
            "    echo \"\\$1\" | grep -o -P \"(?<=\\$2).*(?=\\$3)\"",
            "}\n\n"
        ],
        "description": "Extract text between two tokens"
    },
    "Trim string": {
        "prefix": "string trim",
        "body": [
            "#Function: trim()",
            "#",
            "#Brief: Remove leading and/or trailing whitespace characters",
            "#",
            "#Argument 1(\\$1): Text that can possibly have leading or trailing spaces",
            "#",
            "#Usage exampe:",
            "#  TEXT=\" crap goes wireal sometimes \"",
            "#  echo \"--\\$TEXT--\"",
            "#  RES=\\$(trim \"\\$TEXT\")",
            "#  echo \"--\\$RES--\"",
            " trim(){",
            "     if [ \\$# -ne 1 ]; then echo \"Invalid number of parameters provided to \\$FUNCNAME\"; $(return >/dev/null 2>&1) && return 1 ||  exit 1; fi",
            "      declare var=\"\\$*\"",
            "    var=\"\\${var#\"\\${var%%[![:space:]]*}\"}\"",
            "    var=\"\\${var%\"\\${var##*[![:space:]]}\"}\"",
            "    printf '%s' \"\\$var\"",
            "}\n\n"
        ],
        "description": "Remove leading and/or trailing whitespace characters"
    }
}