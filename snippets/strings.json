{
    "Prefix search known length": {
        "prefix": "String prefix length",
        "body": [
            "STRING=\"two-chars-after-3x\"",
            "echo \"STRING: \\$STRING\"",
            "echo \"All but last 2    : \\\\\"\\${STRING::-2}\\\\\"\"",
            "echo \"Only show first 16: \\\\\"\\${STRING::+16}\\\\\"\"",
            "if [[ \"\\${STRING::-2}\" == \"two-chars-after-\" ]]; then",
            "    echo \"It's a match\"",
            "fi",
            ""
        ],
        "description": "Check if a string starts with a specific text and is of a specific lengthS"
    },
    "Prefix search with wildcard": {
        "prefix": "String starts with",
        "body": [
            "STRING=\"Bash is great\"",
            "echo \"STRING: \\$STRING\"",
            "if [[ \"\\$STRING\" == \\$\"Bash is \"*  ]]; then",
            "    echo \"It's a match STRING starts with \\\\\"Bash is \\\\\"\"",
            "fi",
            ""
        ],
        "description": "Check if string starts with using wild card"
    },
    "Postfix search": {
        "prefix": "String ends with",
        "body": [
            "STRING=\"Bash is great\"",
            "ENDING=\\${STRING: -7}",
            "echo \"STRING: \\$STRING\"",
            "echo \"Last 7    : \\\\\"\\$ENDING\\\\\"\"",
            "if [[ \"\\$ENDING\" == \"s great\"  ]]; then",
            "    echo \"It's a match STRING ends with \\\\\"s great\\\\\"\"",
            "fi",
            ""
        ],
        "description": "Check if string ends with"
    },
    "Substring with cut": {
        "prefix": "string cut",
        "body": [
            "STRING=\"Bash is great\"",
            "STRLEN=\\$(echo \\${#STRING})",
            "echo \"String                          :\\$STRING\"",
            "echo \"Length                          :\\$STRLEN\"",
            "echo \"First 4                         :\\$(echo \"\\$STRING\"|cut -c -3)\"",
            "echo \"middle                          :\\$(echo \"\\$STRING\"|cut -c 4-9) \"",
            "echo \"last  3 when length is known    :\\$(echo \"\\$STRING\"|cut -c 11-)\"",
            "echo \"last  3 when length is NOT known:\\$(echo \"\\$STRING\"|cut -c \\$(( STRLEN - 2))-)\"",
            ""
        ],
        "description": "Examples when extracting substring from a string using cut. (For when bash version is old)"
    },
    "Replace text in a file": {
        "prefix": "replace text in file",
        "body": [
            "#Function: replaceStrings()",
            "#",
            "#Brief: Replaces text of all strings in a file that  ",
            "#       match given string with a specific value. ",
            "#",
            "#Argument 1(\\$1): File to change",
            "#Argument 2(\\$2): String to search for",
            "#Argument 3(\\$3): new value",
            "#Argument 4(\\$4): (Optional) Set to \"true\" if you want the entire line to be matched",
            "#   # Example - Replace all lines which contain exactly the content \"Find me\" in the file test.txt",
            "#      replaceStrings \"test.txt\" \"Find me\" \"New string\" true",
            "#   # Example - Replace all substrings that match \"Find me\" in the file test.txt",
            "#      replaceStrings \"test.txt\" \"Find me\" \"New string\"",
            "replaceStrings(){",
            "    if [ \\$# -lt 3 ]; then echo \"Invalid number of parameters provided to \\$FUNCNAME\"; exit 1; fi",
            "    ",
            "    declare FILE=\\$1",
            "    declare SEARCH_FOR=\\$2",
            "    declare REPLACE_WITH=\\$3",
            "    declare END_TOKEN=\"\"",
            "    declare START_TOKEN=\"\"",
            "    if [[ \\$4 == \"true\" || \\$4 == \"TRUE\"  ]]; then START_TOKEN=\"^\";END_TOKEN=\"\\$\"; fi;",
            "    if [[  ! -f \\$FILE  ]]; then",
            "        echo \"File \\\\\"\\$FILE\\\\\" does not exist\"; exit 1;",
            "    fi",
            "    sed -i 's,'\"\\$START_TOKEN\"''\"\\$SEARCH_FOR\"''\"\\$END_TOKEN\"','\"\\$REPLACE_WITH\"',g' \\$FILE",
            "}",
            ""
        ],
        "description": "Replace texts in a file that match a specified substring"
    },
    "Replace trailing text in a file that starts with": {
        "prefix": "replace text in file that starts with",
        "body": [
            "#Function: replaceStringsAfter()",
            "#",
            "#Brief: Replaces trailing text of all strings in a file that start ",
            "#       with a specific value.  Leading white spaces will be removed. ",
            "#",
            "#Argument 1(\\$1): File to change",
            "#Argument 2(\\$2): String to search for",
            "#Argument 3(\\$3): new value",
            "#   Example - find a line that starts with \"variable=\" in the file test.txt and replace that line with the text \"variable=new_value\"",
            "#      replaceStringsAfter test.txt \"variable=\" \"new_value\"",
            "replaceStringsAfter(){",
            "    if [ \\$# -ne 3 ]; then echo \"Invalid number of parameters provided to \\$FUNCNAME\"; exit 1; fi",
            "",
            "    declare FILE=\\$1",
            "    declare SEARCH_FOR=\\$2",
            "    declare REPLACE_WITH=\\$3",
            "    if [[  ! -f \\$FILE  ]]; then",
            "        echo \"File \\\\\"\\$FILE\\\\\" does not exist\"; exit 1;",
            "    fi",
            "",
            "    sed -i 's,^\\\\s*'\"\\$SEARCH_FOR\"'.*\\$,'\"\\$SEARCH_FOR\"''\"\\$REPLACE_WITH\"',g' \\$FILE",
            "}",
            ""
        ],
        "description": "Replace trailing texts in a file that begin with a specified substring"
    },
    "Create multiline file": {
        "prefix": "create text file",
        "body": [
            "#Function: createFile()",
            "#",
            "#Brief: Creates a file with muliple lines",
            "#",
            "#Argument 1(\\$1): File to create",
            "createFile() {",
            "    declare FILE=\"\\$1\"",
            "    echo \"Creating \\$FILE\"",
            "    CURRENT=\\$(date +\"%Y-%m-%d %H:%M:%S\")",
            "    read -r -d '' VAR <<EOM",
            "# File created \\$CURRENT.",
            "    This file contains",
            "    multiple lines",
            "EOM",
            "    echo \"\\$VAR\" >\"\\$FILE\"",
            "}",
            "",
            "createFile \"newFile.txt\"",
            ""
        ],
        "description": "Create a text file with multiple lines"
    }
}