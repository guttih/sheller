{
    "Checks if a file is found": {
        "prefix": "File exists",
        "body": [
          "if test -f \"${1:filename.txt}\"",
          "then",
          "    ${2:echo \"File exists\"}",
          "else",
          "    ${3:echo \"File does not exist\"}",
          "fi",
          ""
        ],
        "description": "Checks if a file is found"
      }
      ,
    "Checks if a directory is found": {
      "prefix": "Dir exists",
      "body": [
        "if test -d \"${1:~/dirname}\"",
        "then",
        "    ${2:echo \"Directory exists\"}",
        "else",
        "    ${3:echo \"Directory does not exist\"}",
        "fi",
        ""
      ],
      "description": "Checks if a Directory is found"
    },
    "Iterate files in directory": {
      "prefix": "List files",
      "body": [
        "for FILE in ${1:*.sh}; do ",
        "    if [ -f \"\\$FILE\" ]; then",
        "        ${2:echo -e \"File name: \\$FILE\";} ",
        "    fi",
        "done",
        ""
      ],
      "description": "Walk through each file name in a directory"
    },
    "Iterate only directories in directory": {
      "prefix": "List dirs",
      "body": [
        "for DIR in ${1:*/}; do ",
        "    if [ -d \"$$DIR\" ]; then",
        "        ${2:echo -e \"Directory: \\$DIR\";} ",
        "    fi",
        "done",
        ""
      ],
      "description": "Walk through each sub-directory name in a directory"
    },
    "Iterate files in directory recursive": {
      "prefix": "List files recursive",
      "body": [
        "find . -type f ${1|-name '*', -name '*.txt'|} -print0 | ",
        "while IFS= read -r -d '' FILE; do",
        "    printf '%s\\n' \"\\$FILE\"",
        "done",
        ""
      ],
      "description": "Iterate file names in directory recursive. That is, walking through sub-directories also."
    },
    "Iterate files in directory recursive regex": {
      "prefix": "List files recursive reg",
      "body": [
        "find . -type f -iregex '.*\\.\\(txt\\|}doc\\|sh\\)\\$' -print0 | ",
        "while IFS= read -r -d '' FILE; do",
        "${1|    printf '%s\\n' \"$FILE\",    printf 'Path:%-30s\\tName:\"%-30s\"\\n' \"$(dirname \"$FILE\")\" \"$(basename \"$FILE\")\"|}",
        "done",
        ""
      ],
      "description": "Iterate file names in directory recursively using regex.  That is, walking through sub-directories also."
    },
    "Iterate directories in directory": {
      "prefix": "List dirs recursive",
      "body": [
        "find . -type d -name ${1:'*'} -print0 | ",
        "while IFS= read -r -d '' DIR; do",
        "    printf '%s\\n' \"\\$DIR\"",
        "done",
        ""
      ],
      "description": "Iterate directory names in directory recursively.  That is, walking through sub-directories also."
    },
    "Compare file names in two directories": {
      "prefix": "compare filenames in dir",
      "body": [
        "#Function: compareFilenamesInDirectory()",
        "#",
        "#Brief: Compares file names in two directories and prints out file names",
        "#",
        "#Argument 1(\\$1): (Optional) [-matching] (default) Print filenames that exit in both directories.",
        "#                           [-missing]            Print filenames that only exits in First directory.",
        "#                           If this argument is skipped then -matching is used.",
        "#Argument 2(\\$2): Dir1, first directory to compare",
        "#Argument 3(\\$3): Dir2, second directory to be compared with Dir1",
        "#   # Example which searches for all files existing in current directory and are missing in \"/bin\"",
        "#   compareFilenamesInDirectory -missing \".\" \"/bin\"",
        "compareFilenamesInDirectory() {",
        "    declare OPTION",
        "    if [ \\$# -eq 3 ]; then",
        "        if [[ \"\\$1\" != \"-missing\" && \"\\$1\" != \"-matching\" && \"\\$1\" != \"\" ]]; then",
        "            echo \"Invalid parameter \\\"\\$1\\\"\"",
        "            return 1",
        "        fi",
        "        OPTION=\\$1",
        "        shift",
        "    fi",
        "    if [ \\$# -ne 2 ]; then",
        "        echo \"Invalid number of parameters\"",
        "        return 1",
        "    fi",
        "    declare NAME",
        "    if ! test -d \"\\$1\"; then",
        "        echo \"Error: Directory: \\\"\\$1\\\" does not exist\"",
        "        return 1",
        "    fi",
        "    if ! test -d \"\\$2\"; then",
        "        echo \"Error: Directory: \\\"\\$2\\\" does not exist\"",
        "        return 1",
        "    fi",
        "    for FILE in \"\\$1\"/*; do",
        "        if [ -f \"\\$FILE\" ]; then",
        "            NAME=\\$(echo \\$(basename \"\\$FILE\"))",
        "            if [ \"\\$OPTION\" = \"-missing\" ]; then",
        "                if ! test -f \"\\$2\"/\\$NAME; then",
        "                    echo \"\\$NAME\"",
        "                fi",
        "            else",
        "                if test -f \"\\$2\"/\\$NAME; then",
        "                    echo \"\\$NAME\"",
        "                fi",
        "            fi",
        "        fi",
        "    done",
        "}\n"
      ],
      "description": "Compare file names in two directories and prints out matching or missing file names"
    },
    "Script directory": {
      "prefix": "Get script dir",
      "body": [
          "#Function: getScriptPath()",
          "#",
          "#Brief: Gets the path to this script",
          "#",
          "getScriptPath(){",
          "    echo \"\\$( cd \"\\$( dirname \"\\${BASH_SOURCE[0]}\" )\" && pwd )\"",
          "}",
          "",
          "DIR=\\$(getScriptPath)",
          "echo \"Path to this script is \\$DIR\"\n"
      ],
      "description": "Get path to the the current bash file"
  },
  "Script Name": {
    "prefix": "Get script name",
    "body": [
      "#Function: getFileName()",
      "#",
      "#Brief: Extracts name of file",
      "#",
      "#Argument 1(\\$1): filename or dir and filename",
      "getFileName(){",
      "    if [ \\$# -ne 1 ]; then echo \"Invalid number of parameters\"; exit 1; fi",
      "    echo \"\\$( basename \"\\$1\" )\"",
      "}",
      "",
      "FILE=\\${BASH_SOURCE[0]}",
      "NAME=\\$(getFileName \\$FILE)",
      "echo \"File name: \\$NAME\"",
      ""
    ],
    "description": "Get name of current script"
},
"Extract filename": {
  "prefix": "Get file name",
  "body": [
    "#Function: getFileName()",
    "#",
    "#Brief: Extracts name of file",
    "#",
    "#Argument 1(\\$1): filename or dir and filename",
    "getFileName(){",
    "    if [ \\$# -ne 1 ]; then echo \"Invalid number of parameters\"; exit 1; fi",
    "    echo \"\\$( basename \"\\$1\" )\"",
    "}",
    "",
    "FILE=\"/c/stuff/me.txt\"",
    "NAME=\\$(getFileName \\$FILE)",
    "echo \"File name: \\$NAME\"",
    ""
  ],
  "description": "Extracts filename name from a file path"
},
"Extract file directory": {
  "prefix": "Get file directory",
  "body": [
    "#Function: getFileDirectory()",
    "#",
    "#Brief: Extracts the path from a file path and name",
    "#",
    "getFileDirectory(){",
    "    if [ \\$# -ne 1 ]; then echo \"Invalid number of parameters\"; exit 1; fi",
    "    echo \"\\$( dirname \"\\$1\" )\"",
    "}",
    "",
    "FILE=\"/c/stuff/me.txt\"",
    "DIR=\\$(getFileDirectory \\$FILE )",
    "echo \"Directory: \\$DIR\"\n"
  ],
  "description": "Extracts directory from a file path."
},
"Extract file extension": {
  "prefix": "Get file extension",
  "body": [
    "#Function: getFileExtension()",
    "#",
    "#Brief: Extracts file extension from a file path.",
    "#",
    "#Argument 1(\\$1): Describe argument 1",
    "getFileExtension(){",
    "    if [ \\$# -ne 1 ]; then echo \"Invalid number of parameters\"; exit 1; fi",
    "    echo \"\\${1##*.}\"",
      "}",
      "",
      "FILE=\"/c/stuff/me.txt\"",
      "EXTENSION=\\$(getFileExtension \\$FILE )",
      "echo \"File extension is \\$EXTENSION\"\n"
  ],
  "description": " Extract file extension from a file path."
}

  }
  